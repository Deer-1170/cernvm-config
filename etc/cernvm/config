#!/bin/sh

setupSwap() {
  local swap_size="$1"
  if [ ! -f /mnt/.rw/swapfile ]; then
    if [ "x$swap_size" != "x" ]; then
      if [ "x$swap_size" = "xauto" ]; then
        swap_size="$(($(nproc)*2))g"
      fi
      fallocate -l "${swap_size}" /mnt/.rw/swapfile
      chmod 0600 /mnt/.rw/swapfile
      mkswap /mnt/.rw/swapfile >/dev/null 2>&1
      swapon /mnt/.rw/swapfile >/dev/null 2>&1
    fi
  fi
}


setGuiBoot() {
  systemctl set-default graphical.target
}


setConsoleBoot() {
  systemctl set-default multi-user.target
}


# TODO: lxdm
switchAutoLogin() {
  local how=$1

  if [ "x$how" = "xon" ]; then
    sed -i -e "/^auto_login[ \t]*/d" /etc/slim.conf
    sed -i -e "/^default_user[ \t]*/d" /etc/slim.conf
    echo "default_user $CERNVM_USER" >> /etc/slim.conf
    echo "auto_login yes" >> /etc/slim.conf
  elif [ "x$how" = "xoff" ]; then
    sed -i -e "/^auto_login[ \t]*/d" /etc/slim.conf
    sed -i -e "/^default_user[ \t]*/d" /etc/slim.conf
  else
    echo "unknown option to switchAutoLogin: $how" 1>&2
    return 1
  fi
  return 0
}


getConfig() {
  local cfg=$1
  local url=$2
  local file
  local http_proxy  

  curl --connect-timeout 10 -4 -s -o $cfg -i "$url"

  if [ $? -eq 0 ]
  then
     return 0
  fi

  # TODO: get the proxy from micro
  if [ "x$CVMFS_HTTP_PROXY" != "x" -a      \
       "x$CVMFS_HTTP_PROXY" != "xDIRECT" ] 
  then  
    cvmfs_proxy=`echo "$CVMFS_HTTP_PROXY" | awk -F":|;" '{printf("%s:%s\n",$2,$3)}'`
    env http_proxy="http:$cvmfs_proxy" curl --connect-timeout 10 -4 -s -o $cfg -i "$url"
    if [ $? -eq 0 ]
    then
       return 0
    fi
  fi
  
  return 1
}


verifyConfig() {
  local cfg=$1
  local result=1
  local signature=`awk '/^Config-signature: / {print $2 }' $cfg | sed 's/\r//'`
  local content=`awk '/LC_ALL=C/ { content=1 } {if (content) {print}; }' $cfg`

  CERNVM_CONFIG_KEY=${CERNVM_CONFIG_KEY:=/etc/cernvm/keys/cern.ch.pub}

  if [ -x /usr/bin/openssl -a \
       -x /usr/bin/base64 -a  \
       -f $CERNVM_CONFIG_KEY -a \
       "$signature" != "" ]
  then
     local r_hash=`echo "$content" | /usr/bin/openssl sha1`
     local s_hash=`echo "$signature" | /usr/bin/base64 -d -w 0 | /usr/bin/openssl rsautl -pubin -inkey $CERNVM_CONFIG_KEY -verify`
     if [ "$r_hash" = "$s_hash" ]
     then
        result=0
     else
       result=2
     fi
  fi
  echo $content | sed 's/ /\n/g' > $cfg
  return $result
}


createDesktopIcons() {
  for file in $CONFIG_FILES
    do
    if [ -e /etc/cernvm/$file.conf ]
        then
        eval `cat /etc/cernvm/$file.conf | tr -d \" | sed 's/=\$(.*)//g' | sed -n -e  '/^[^+]/s/\([^=]*\)[=]\(.*\)/\1="\2"; /gp'`
    fi
  done

  if [ "x$CERNVM_DESKTOP_ICONS" != "x" ]; then
    mkdir -p /etc/skel/Desktop
    for icon in $(echo "$CERNVM_DESKTOP_ICONS" | sed 's/%/ /g'); do
      name=$(echo "$icon" | cut -d, -f1 | sed 's/~/ /g')
      entry=$(echo "$icon" | cut -d, -f2 | sed 's/~/ /g')
      echo "$entry" | base64 -d > "/etc/skel/Desktop/${name}.desktop"
    done
  fi
}


customizeDesktop() {
    #This function will do the following only if CERNVM_EDITION is Desktop
    #  1. change Resolution by patching /etc/x11/xorg.conf
    #  2. if CERNVM_START_XDM is:
    #      on: run xdm in runlevel 3&5
    #      off:disable xdm in runlevel 3&5
    #  3. if CERNVM_KEYBOARD is not empty and if /usr/bin/system-config-keyboard exists
    #      set the keyboard

    for file in $CONFIG_FILES
      do
      if [ -e /etc/cernvm/$file.conf ]
	  then
          eval `cat /etc/cernvm/$file.conf | tr -d \" | sed 's/=\$(.*)//g' | sed -n -e  '/^[^+]/s/\([^=]*\)[=]\(.*\)/\1="\2"; /gp'` 
      fi
    done

   if [ x$CERNVM_EDITION == "xDesktop" ]
   then
      if [ x$CERNVM_START_XDM == "xon" ]
      then
        setGuiBoot
      fi
      if [ x$CERNVM_START_XDM == "xoff" ]
         setConsoleBoot 3
      fi
      if [ x$CERNVM_KEYBOARD != "x" -a -x /usr/bin/system-config-keyboard ]
      then
         /usr/bin/system-config-keyboard --noui $CERNVM_KEYBOARD > /dev/null 2>&1
      fi
      if [ "x$CERNVM_AUTOLOGIN" == "xon" -o "x$CERNVM_AUTOLOGIN" == "xoff" ]
      then
         switchAutoLogin $CERNVM_AUTOLOGIN
      fi
   else 
      # when not in desktop mode , turn off xdm
      setConsoleBoot
   fi
}


cernvm_config () {
  for file in $CONFIG_FILES
  do
    if [ -r /etc/cernvm/$file.conf ]
    then
      eval `cat /etc/cernvm/$file.conf | tr -d \" | sed 's/=\$(.*)//g' | sed -n -e  '/^[^+]/s/\([^=]*\)[=]\(.*\)/\1="\2"; /gp'` 
    fi
  done

  case `uname -m` in
    i*86*)
      platform=i686-pc-linux-gnu
      ;;
    x86_64*)
      platform=x86_64-unknown-linux-gnu
      ;;
     *)
      echo "(Unknown or unsupported platform)"
      exit 1
      ;;
  esac

  server="http://cernvm.cern.ch/config/"

  if [ x"$CERNVM_CONFIG_URL" != "x" ]
  then
    server="$CERNVM_CONFIG_URL"
  fi

  if [ x"$config_url" != "x" ]
  then
    server=$config_url
  fi

  if [ "x$CERNVM_ORGANISATION" = "x" ]
  then
    organisations="none"
  else
    organisations=`echo $CERNVM_ORGANISATION | awk '{printf("%s",tolower($1))}' | sed 's/,/ /g'`  
  fi

  if [ "x$CERNVM_UUID" = "x" ]
  then
    uuid=""
  else
    uuid="&uuid=${CERNVM_UUID}"
  fi

  if [ -x /usr/bin/cvmfs2 ]
  then
    cvmfs_version="&cvmfs_version=$(/usr/bin/cvmfs2 --version 2>&1 | awk '{print $3}')"
  else
    cvmfs_version=""
  fi

  touch /etc/cernvm/default.conf > /dev/null 2>&1 || exit 1

  for org in $organisations
  do
    local cfg=`mktemp`
    organisation="&organisation=${org}"
    url="$server/?platform=${platform}${organisation}${uuid}${cvmfs_version}"
    getConfig $cfg $url
    if [ $? -eq 0 ]
    then
      verifyConfig $cfg
      case $? in 
         1)
           cat $cfg # Config is not verified
           echo "CERNVM_CONFIG_STATUS=untrusted"
           ;;
         2)
           echo "CERNVM_CONFIG_STATUS=modified"
           ;;
         0)
           cat $cfg # Config is verified
           echo "CERNVM_CONFIG_STATUS=verified"
          ;;
       esac
     fi
     if [ "x$CERNVM_DOMAIN" != "x" ]
     then
       if [ `set | grep ^CVMFS | wc -l` -gt 0 ]
       then
         set | grep ^CVMFS > /etc/cvmfs/config.d/${org}.${CERNVM_DOMAIN}.local
       fi
     fi
     rm -rf $cfg
  done | sort -u | sed -e 's/^CVMFS_HTTP_PROXY=\(.*\)/CVMFS_HTTP_PROXY="\1"/' > /etc/cernvm/default.conf+

  if [ -s /etc/cernvm/default.conf+ ]
  then
    # add check for content
    cp -f /etc/cernvm/default.conf+ /etc/cernvm/default.conf
  fi

  if [ -s /etc/cernvm/default.conf ]
  then
      eval `cat /etc/cernvm/default.conf | tr -d \" | sed 's/=\$(.*)//g' | sed -n -e  '/^[^+]/s/\([^=]*\)[=]\(.*\)/\1="\2"; /gp'` 
  fi

  if [ "x$CERNVM_TZONE" != "x" ]
  then
     for dir in /usr/share/zoneinfo /usr/share/zoneinfo/posix
     do
       if [ -f $dir/$CERNVM_TZONE ]
       then
          ln -sf $dir/$CERNVM_TZONE /etc/localtime
          break
       fi
     done
  fi
 
  if [ "x$CERNVM_CONFIG_DATE" != "x" ]
  then
     date -u $CERNVM_CONFIG_DATE > /dev/null 2>&1
     hwclock --systohc > /dev/null 2>&1 || true
  fi

  if [ "x$CERNVM_UUID" != "x" ]
  then
     echo "CERNVM_UUID=$CERNVM_UUID" > /etc/cernvm/machine.conf
  fi


}


[ -f /etc/cernvm/custom/config.sh ] && . /etc/cernvm/custom/config.sh

config_opt=0
config_reset=0
config_proxy=1
config_file=site
config_dir=/etc/cernvm
config_url=""
CONFIG_FILES="config default tools domain site machine custom"

while getopts ?rhxypuc:d:s:t: opt 
     do
          case $opt in
          c)     config_opt=1 
                 config_file="$OPTARG"
                 config_old=""

                 shift $(($OPTIND - 1))

                 mkdir -p $config_dir || exit 1

                 # At some point in the future there might be editions again
		 CERNVM_EDITION="Desktop"

    	         CERNVM_START_XDM="xoff"
    	         CERNVM_CVMFS2="on"

                 if [ -f  ${config_dir}/${config_file}.conf ]
                 then
                    . ${config_dir}/${config_file}.conf
                    s_vars=`cat  ${config_dir}/${config_file}.conf | cut -d= -f1,1`
                 fi
                 for key in  $*
                 do
                    eval ${key}
                 done

                 d_vars="CERNVM_ORGANISATION CERNVM_EDITION CERNVM_CVMFS2"

                 for var in `echo $d_vars $s_vars | tr -s [:space:] "\n" | sort -u` 
                 do
                    echo $var=${!var}
                 done >  ${config_dir}/${config_file}.conf

                 cernvm_config

                 exit 0
                 ;;
          d)     config_dir="$OPTARG"
                 ;;
          x)     customizeDesktop
                 ;;
          y)     createDesktopIcons
                 ;;
          g)     exit 0
                 ;;
          p)     config_proxy=1
                 ;;
          r)     CONFIG_FILES="config default"
                 ;;
          s)     shift 1
                 config_url=$1
                 shift 1
                 ;;
          t)     setupSwap "$OPTARG"
                 ;;
          u)
                 shift $(($OPTIND - 1))                
         	 user=$1
	         shell=$2
	         passwd="$3"
	         group=$4
	         if [ "x$user" = x ]; then
		   exit 0
	         fi
	         if [ "x$shell" = x ]; then
		    exit 0
	         fi
	         if [ "x$passwd" = x ]; then
	  	    exit 0
	         fi
	         if [ "x$group" = x ]; then
                    group=`echo $CERNVM_ORGANISATION | sed 's/,/ /g' | awk '{printf("%s",tolower($1))}'`
	         fi
                 if [ "x$user" != "x$group" ]
                 then 
                   groupadd -f -r ${group} > /dev/null 2>&1
                 fi
                 if [ ! -f /etc/firstboot ] 
                 then 
                    mv -f /etc/sudoers.cernvm /etc/sudoers
	            chmod 0440 /etc/sudoers
                    groupadd wheel > /dev/null 2>&1
                    touch /etc/firstboot
                 fi
 	         id $user > /dev/null 2>&1
                 if [ $? -eq 1 ] 
                 then
                   useradd $user
                   if [  /etc/firstboot -nt /etc/sudoers ] 
                   then
                       usermod -G wheel,docker $user
                       touch /etc/sudoers
                   fi
                 fi
                 usermod -s $shell -g $group $user || exit 1 
                 if [ "x$user" != "x$group" ]
                 then 
                   if [ `groups $user | grep -c ' wheel'` -eq 1 ]
                   then
                      groups='wheel,docker,users,'
                   else
                      groups='users,'
                   fi
                   groups=${groups}${group}
                   usermod -G $groups $user || true
                 fi
                 if [ "$(echo $passwd | head -c3)" != '$6$' ]; then
                   echo $passwd | passwd --stdin $user
                 else
                   usermod -p "$passwd" $user
                 fi
                 exit $?
	         ;;
         \?|h)   printf "Usage: %s: [-x][-s <config server url>][-p][-d <dir>][-c <config file>] CERNVM_ORGANISATION=<ALICE,ATLAS...>\n"  $0 
                 printf "       %s: -u <user> <shell> <password> [group]\n" $0
                 exit 2
                 ;;
          esac
done

cernvm_config

