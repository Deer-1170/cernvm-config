#!/usr/bin/perl
#############################################################################
# cvm - a script to access minimal set of Amazon Services
#
# SYNOPSIS
# cvm [flags] <command [options]>
#
# DESCRIPTION
#
# AUTHOR:
# Predrag Buncic, e-mail: Predrag.Buncic@cern.ch 
#
# CREATION DATE:
# 09-May-2011
#C<
###########################################################################

use Carp qw( carp croak );
use Data::Dumper;
use MIME::Base64;
use Text::Table;
use Switch;

use strict;

use Getopt::Long qw(:config no_ignore_case bundling pass_through);

sub Usage {
    print "Usage: cvm [flags] <command [options]>\n";
    exit 1;
}

my $UNKNOWN = 'n/a';

my $region = defined($ENV{EC2_REGION}) ? $ENV{EC2_REGION} :  "us-east-1";
my $url    = defined($ENV{EC2_URL}) ? $ENV{EC2_URL} :  "https://ec2.amazonaws.com";
my $ec2_private_key = defined($ENV{EC2_PRIVATE_KEY}) ? $ENV{EC2_PRIVATE_KEY} : undef;
my $ec2_cert = defined($ENV{EC2_CERT}) ? $ENV{EC2_CERT} : undef;
my $connection_timeout = undef;
my $request_timeout = undef;
my $verbose = undef;
my $headers = undef;
my $debug = undef;
my $help;

my $access_key_id;
my $secret_access_key;
my $keypair_name;
my $private_key_path;

sub read_config {
    my $conf = shift;
   if ( -f $conf ) {
          my $config = Config->new;
	  $config = Config->read($conf);
	  $access_key_id =  $ENV{AWS_ACCESS_KEY_ID} ? $ENV{AWS_ACCESS_KEY_ID} : $config->{Credentials}->{access_key_id};
	  $secret_access_key =  $ENV{AWS_SECRET_ACCESS_KEY} ? $ENV{AWS_SECRET_ACCESS_KEY} : $config->{Credentials}->{secret_access_key};
	  $keypair_name =  $ENV{AWS_KEYPAIR_NAME} ? $ENV{AWS_KEYPAIR_NAME} : $config->{Credentials}->{keypair_name};
	  $private_key_path =  $ENV{AWS_PRIVATE_KEY_PATH} ? $ENV{AWS_PRIVATE_KEY_PATH} : $config->{Credentials}->{private_key_path};
          $region =  $config->{Service}->{Region} ? $config->{Service}->{Region} : $region;
          $url =  $config->{Service}->{Url} ? $config->{Service}->{Url} : $url;
     }   
}

sub cmd_run {
  my $cloud = shift;
  my $instance_count;
  my @group;
  my $keypair;
  my $user_data;
  my $user_data_file;
  my $addressing_type;
  my $instance_type='m1.large'; 
  my $zone;
  my $kernel_id;
  my $ramdisk_id;
  my $block_device_mapping;
  my $monitor;
  my $disable_api_termination;
  my $behavior = 'terminate';
  my $placement_group;
  my $tenancy;
  my $subnet;
  my $ip_address;
  my $token; 
  my $template; 
  my $proxy; 
  my $fields = "all"; 
  Getopt::Long::Configure('no_pass_through');
  Getopt::Long::GetOptions(
     'n|instance-count=s' => \$instance_count,
     'g|group-count=s' => \@group,
     'k|key=s' => \$keypair,
     'd|user-data=s' => \$user_data,
     'f|user-data-file=s' => \$user_data_file,
     'addressing=s' => \$addressing_type,
     't|instance-type=s' => \$instance_type, 
     'availability-zone=s' =>  \$zone,
     'kernel=s' =>  \$kernel_id,
     'ramdisk=s' => \$ramdisk_id,
     'b|block-device-mapping=s' => \$block_device_mapping,
     'm|monitor' => \$monitor,
     'disable-api-termination' => \$disable_api_termination,
     'instance-initiated-shutdown-behavior=s' => \$behavior,
     'placement-group=s' => \$placement_group,
     'tenancy=s' => \$tenancy,
     's|subnet=s' => \$subnet,
     'private-ip-address=s' =>  \$ip_address,
     'client-token=s' => \$token, 
     'T|template=s' => \$template,
     'p|proxy' => \$proxy, 
     'fields=s' => \$fields) 
  or die("Invalid commmand line options.");

  my $block_device_map = {};
  if ($block_device_mapping) { 
    my ($dev,$virtdev) = split('=',$block_device_mapping);
    my $block_device_map->{DeviceName} = $dev;    
    switch ($virtdev) {
	case "none" {     
               my $block_device_map->{Virtualname} = $virtdev;    
             }
	case "ephermal[0-3]" { ; }
               my $block_device_map->{Virtualname} = $virtdev;    
             }
	case ".*:.*:.*"  { 
              ($block_device_map->{DeviceName}->{Ebs}->{SnapshotId},
               $block_device_map->{DeviceName}->{Ebs}->{VolumeSize},
               $block_device_map->{DeviceName}->{Ebs}->{DeleteOnTermination}) =  split(':',$virtdev);
             }
	else{ die("Invalid block device mapping."); 
     }
  }

  my $ami_id = @ARGV[0]; shift @ARGV;

  (! $ami_id) and die("Image ID not specified"); 

  my @templates;

  if (! $template) {
    my ($min,$max) = split('-',$instance_count ? $instance_count : '1-1');
    push  @templates, "none:$min:$max";      
  } 

  my $opt = {};

  if ($proxy) {
      my $proxy_data;
      # my $out  = `lcg grid-proxy-init`;
      my $file = `lcg grid-proxy-info -path` or die("Proxy not found.");
      $proxy_data = `cat $file`;
      $opt->{X509_CERT} = encode_base64($proxy_data,'');
   }

  if ($template) {
    foreach my $entry (@ARGV) {
      my ($key,$val) = split ('=',$entry);
      $opt->{$key} = $val;
    }
    push @templates,split(',',$template);
  }

  $opt->{INDEX} = $opt->{INDEX} ? $opt->{INDEX} : 1;

  foreach my $entry (@templates) {
    my ($t,$min,$max,$udata);
    if ( $entry =~ /none:.*:.*/ ) {
       ($t,$min,$max) = split(':',$entry); 
    } else {    
       ($t,$min,$max) = split(':',$entry); 
       my $tmpl = Template->new($t);
       $user_data =  $tmpl->replace($opt);
    }
    $min = ($min) ? $min : 1;
    $max = ($max) ? $max : $min;

#   print Dumper({

   my $response = $cloud->runInstances({
        ImageId => $ami_id,
        MinCount => $min,
        MaxCount => $max,
        KeyName => $keypair,
        SecurityGroup => join(' ',@group),
        UserData => encode_base64($user_data,''),
        InstanceType => $instance_type,
        Placement => { AvailabilityZone => $zone },
        KernelId => $kernel_id,
        RamdiskId => $ramdisk_id,
        BlockDeviceMapping =>  $block_device_map,
        Monitoring => {Enabled => $monitor},
        SubnetId => $subnet,
        AdditionalInfo => $token,
        DisableApiTermination => $disable_api_termination,
        InstanceInitiatedShutdownBehavior => $behavior,
        License => {FieldValue => undef, FieldType => "Amazon::EC2::Model::InstanceLicenseSpecification"},
        PrivateIpAddress => $ip_address,
    });

    if ($response->isSetRunInstancesResult()) { 
        my $runInstancesResult = $response->getRunInstancesResult();
	if ($runInstancesResult->isSetReservation()) { 
            my $reservationList = $runInstancesResult->getReservation();
           displayReservations($fields,$reservationList);
        }
    }
    $opt->{INDEX}++;
  }
}

sub cmd_ls_images {
  my $cloud = shift;
  my $all;
  my $owner = '392941794136';
  my $executable_by;
  my @filter;
  my $fields = '1,2,4,5,6,7';
  my $long = undef;
  Getopt::Long::Configure('no_pass_through');
  Getopt::Long::GetOptions(
     'a|all' => \$all,
     'o|owner=s' => \$owner,
     'x|executable_by=s' => \$executable_by,
     'l|long' => \$long,
     'filter=s' => \@filter,
     'fields=s' => \$fields,
  )
  or die("Invalid commmand line options.");


  my $response = $cloud->describeImages({ImageId => @ARGV[0],
                                         Owner => $owner,
                                         ExecutableBy => $executable_by ,
                                         Filter => {FieldValue => [@filter], FieldType => ["Amazon::EC2::Model::Filter"]}});


  my @header = ('','AMI','LOCATION','NAME','STATE','VISIBILITY','ARCH','TYPE','AKI','ARI','PLATFORM','VTYPE');

  my $table = Text::Table->new();

  my @content = ();

  push @content,[@header] if $headers;

  if ($response->isSetDescribeImagesResult()) { 
      my $describeImagesResult = $response->getDescribeImagesResult();
      my $imageList = $describeImagesResult->getImage();
      foreach (@$imageList) {
            my $image = $_;
            push @content, [
                      'IMAGE',
                       $image->getImageId(),
                       (ref($image->getImageLocation()) ne 'HASH' ) ? $image->getImageLocation() : $UNKNOWN,
                       (ref($image->getName()) ne 'HASH' ) ? $image->getName() : $UNKNOWN,
                       $image->getImageState(),
                       $image->getVisibility(),
                       $image->getArchitecture(),
                       $image->getImageType(),
                       (ref($image->getKernelId()) ne 'HASH' ) ? $image->getKernelId() : $UNKNOWN,
                       (ref($image->getRamdiskId()) ne 'HASH' ) ? $image->getRamdiskId() : $UNKNOWN,
                       (ref($image->getPlatform()) ne 'HASH' ) ? $image->getPlatform() : $UNKNOWN,
                       (ref($image->getVirtualizationType()) ne 'HASH' ) ? $image->getVirtualizationType() : $UNKNOWN
	    ];
       }
   } 
  if (@content) {
     $table->load(@content);
     ($fields eq "all")  and $fields = join(",",(1..(@header-1))); print $table->select(split(',',$fields));
 }
}


sub displayTerminatingInstances{
  my $fields   = shift;
  my $response = shift;
  my $table = Text::Table->new();

  my @content = ();

  my @header = ('','ID','STATE','P-STATE');

  push @content,[@header] if $headers;

  if ($response->isSetTerminateInstancesResult()) { 
     my $terminateInstancesResult = $response->getTerminateInstancesResult();
     my $terminatingInstanceList = $terminateInstancesResult->getTerminatingInstance();

     foreach (@$terminatingInstanceList) {
         my $terminatingInstance = $_;
          push @content,[
                 'TERMINATING',
                  $terminatingInstance->getInstanceId(),
	          (ref($terminatingInstance->getCurrentState()->getName()) ne 'HASH' ) ? $terminatingInstance->getCurrentState()->getName() : $UNKNOWN,
                  $terminatingInstance->getPreviousState()->getName(),
             ];
      }
   }
   if (@content) {
     $table->load(@content);
     ($fields eq "all")  and $fields = join(",",(1..(@header-1))); print $table->select(split(',',$fields));
   }
}

sub cmd_terminate {
  my $cloud  = shift;
  my $fields = '1,2,3';
  Getopt::Long::Configure('no_pass_through');
  Getopt::Long::GetOptions('fields=s' => \$fields )
                    or die("Invalid commmand line options.");
  displayTerminatingInstances($fields,$cloud->terminateInstances({InstanceId => @ARGV[0]}));
}

sub displayInstances{
  my $fields = shift;
  my $response = shift;
  if ($response->isSetDescribeInstancesResult()) { 
     my $describeInstancesResult = $response->getDescribeInstancesResult();
     my $reservationList = $describeInstancesResult->getReservation();
     displayReservations($fields,@$reservationList);
  }
}


sub displayReservations{
  my $fields = shift;

  my @reservationList = @_;

  my $table = Text::Table->new();

  my @header = ('','RID','OWNER','REQ','GROUP','ID','AMI','DNS','PDNS','STATE','KEY','INDEX',
                   'TYPE','TIME','ZONE','AKI','ARI','MON','IP','PUB-IP','EBS','ARCH','VTYPE');

  my @content = ();

  push @content,[@header] if $headers;

  foreach (@reservationList) {
      my $reservation = $_;
      my $runningInstanceList = $reservation->getRunningInstance(); 
      foreach (@$runningInstanceList) {
           my $runningInstance = $_;
           my @row = ();
           push @row, 
                  'INSTANCE',
                  $reservation->getReservationId(),
                  $reservation->getOwnerId(),
                 (ref($reservation->getRequesterId()) ne 'HASH' ) ? $reservation->getRequesterId() : $UNKNOWN,
	         join(',',@{$reservation->getGroupName()}),
                  $runningInstance->getInstanceId(),
                  (ref($runningInstance->getImageId()) ne 'HASH' ) ? $runningInstance->getImageId() : $UNKNOWN,
                  (ref($runningInstance->getPublicDnsName()) ne 'HASH' ) ? $runningInstance->getPublicDnsName() : $UNKNOWN,
                  (ref($runningInstance->getPrivateDnsName()) ne 'HASH' ) ? $runningInstance->getPrivateDnsName() : $UNKNOWN,
                  $runningInstance->getInstanceState()->getName(),
                  $runningInstance->getKeyName(),
                  $runningInstance->getAmiLaunchIndex(),
                  $runningInstance->getInstanceType(),
                  $runningInstance->getLaunchTime(),
                  $runningInstance->getPlacement()->getAvailabilityZone(),
                  (ref($runningInstance->getKernelId()) ne 'HASH' ) ? $runningInstance->getKernelId() : $UNKNOWN,
                  (ref($runningInstance->getRamdiskId()) ne 'HASH' ) ? $runningInstance->getRamdiskId() : $UNKNOWN,
                  $runningInstance->getMonitoring()->getMonitoringState(),
                  (ref($runningInstance->getIpAddress()) ne 'HASH' ) ? $runningInstance->getIpAddress() : $UNKNOWN,
                  (ref($runningInstance->getPrivateIpAddress()) ne 'HASH' ) ? $runningInstance->getPrivateIpAddress() : $UNKNOWN,
                  (ref($runningInstance->getRootDeviceType()) ne 'HASH' ) ? $runningInstance->getRootDeviceType() : $UNKNOWN,
                  (ref($runningInstance->getArchitecture()) ne 'HASH' ) ? $runningInstance->getArchitecture() : $UNKNOWN,
                  (ref($runningInstance->getVirtualizationType()) ne 'HASH' ) ? $runningInstance->getVirtualizationType() : $UNKNOWN;

          my $blockDeviceMappingList = []; # $runningInstance->getBlockDeviceMapping();
          foreach (@$blockDeviceMappingList) {
              my $blockDeviceMapping = $_;
              my @row;
              if ($blockDeviceMapping->isSetDeviceName()) {
                  push @row,[
                      'BLOCKDEVICE',
                       $blockDeviceMapping->getDeviceName()
                      ];
                  if ($blockDeviceMapping->isSetEbs()) { 
                      my $ebs = $blockDeviceMapping->getEbs();
                      push @row,[
                          $ebs->getVolumeId(),
                          $ebs->getStatus(),
                          $ebs->getAttachTime(),
                          $ebs->getDeleteOnTermination()
                        ];
		  }
	      }
	  }
          push @content,[@row];
       }
  }
  if ( @content) {
     $table->load(@content); 
     ($fields eq "all")  and $fields = join(",",(1..(@header-1))); print $table->select(split(',',$fields));
  }
}


sub cmd_ls_instances {
  my $cloud = shift;
  my @filter;
  my $fields = '5,1,2,4,7,9,10,12,13,14';
  Getopt::Long::Configure('no_pass_through');
  Getopt::Long::GetOptions('filter' => \@filter, 'fields=s' => \$fields )
  or die("Invalid commmand line options.");
  displayInstances($fields,$cloud->describeInstances({InstanceId => @ARGV[0]}));
}

sub cmd_ls {
  my $cloud = shift;
  my $images=0;

  use Getopt::Long qw(:config no_ignore_case bundling);
  Getopt::Long::GetOptions(
     'i|images' => \$images,
  )
  or die("Invalid commmand line options.");

  ($images) && cmd_ls_images($cloud) && return;

  &cmd_ls_instances($cloud);

}

Getopt::Long::GetOptions(
     'region=s' => \$region,
     'U|url=s' => \$url,
     'K|private-key=s' => \$ec2_private_key,
     'C|cert=s' => \$ec2_cert,
     'connection-timeout=n' => \$connection_timeout,
     'request-timeout=n' => \$request_timeout,
     'verbose' => \$verbose,
     'H|headers' => \$headers,
     'debug' => \$debug,
     'h|help' => \$help
)
    or die("Invalid common commmand line options.");

if ($help) { 

    print "\n  Usage: cvm [COMMON OPTIONS] [COMMAND] [COMMAND OPTIONS]\n";
    print qq(
  COMMON OPTIONS

  [--region][-U,--url URL][-K,--private-key] EC2-PRIVATE-KEY][-C,--cert EC2-CERT][-connection-timeout IMEOUT][-request-timeout TIMEOUT][v,--verbose][H,--headers][?,--help,-h]

  --region REGION 
      Overrides the Region specified in the EC2_URL environment variable and the URL specified by the -U option.
      Default: The EC2_URL environment variable, or us-east-1 if the environment variable is not set.
      Example: --region eu-west-1

  -U, --url URL
      URL is the uniform resource locator of the Amazon EC2 web service entry point.
      Default: The EC2_URL environment variable, or https://ec2.amazonaws.com if the environment variable is not set.
      Example: -U https://ec2.amazonaws.com

  -K, --private-key EC2-PRIVATE-KEY
      The private key to use when constructing requests to Amazon EC2.
      Default: The value of the EC2_PRIVATE_KEY environment variable.
      Example: -K pk-HKZYKTAIG2ECMXYIBH3HXV4ZBZQ55CLO.pem

  -C, --cert EC2-CERT    
      The X.509 certificate to use when constructing requests to Amazon EC2.
      Default: The value of the EC2_CERT environment variable.
      Example: -C cert-HKZYKTAIG2ECMXYIBH3HXV4ZBZQ55CLO.pem

  --connection-timeout TIMEOUT
      Specifies a connection timeout (in seconds).
      Example: --connection-timeout 30

  --request-timeout TIMEOUT    
      Specifies a request timeout (in seconds).
      Example: --request-timeout 45

  -v, --verbose    
      Displays verbose output by showing the SOAP request and response on the command line. This is particularly useful if you are building tools to talk directly to our SOAP API.

  -H, --headers
      Displays column headers in the output.

  -?, --help, -h     
      Displays help.

  COMMANDS

  cvm [COMMON OPTIONS][ls -i, ls --images, describe-images] [ls, describe instances] [run, run-instances] [terminate, terminate-instances]

  DESCRIBE IMAGES

  cvm [COMMON_OPTIONS] describe-images [ami_id ...] [-a] [-l] [-o owner ...] [-x user_id ...] [[--filter name=value] ...]

  ami_id
      AMI IDs to describe.
      Type: String
      Default: Returns all AMIs.
      Example: ami-78a54011

  -a, --all
      Describes all AMIs.
      Type: String
      Default: None
      Example: -a

  -o, --owner owner
      Returns AMIs owned by the specified owner. Multiple owner options can be specified. The IDs amazon and self can be used to include AMIs owned by Amazon or AMIs owned by you, respectively.
      Type: String
      Default: None
      Valid Values: amazon | self | AWS account ID
      Example: -o self

  -x, --executable-by user_id
      Returns AMIs for which the specified user ID has explicit launch permissions. The user ID can be an AWS account ID, self to return AMIs for which the sender of the request has explicit launch permissions, or all to return AMIs with public launch permissions.
      Type: String
      Default: None
      Valid Values: all | self | AWS account ID
      Example: -x self

  --filter name=value
      A filter for limiting the results. See the preceding table for a list of allowed filter names and values. If you are using the command line tools on a Windows system, you might need to use quotation marks (i.e., "name=value").
      Type: String
      Default: None
      Example: --filter "tag-value=Production"

  DESCRIBE INSTANCES

  cvm [COMMON_OPTIONS] describe-instances [instance_id ...] [[--filter name=value] ...] 

  Instance_id
      Instance IDs to describe.
      Type: String
      Default: Returns all instances, or only those otherwise specified.
      Example: i-15a4417c

  --filter name=value
      A filter for limiting the results. See the preceding table for a list of allowed filter names and values. If you are using the command line tools on a Windows system, you might need to use quotation marks (i.e., "name=value").
      Type: String
      Default: Describes all instances you own or those you specify by ID.
      Example: --filter "tag-key=Production"

  RUN INSTANCES

  cvm [COMMON_OPTIONS] run-instances ami_id [-n instance_count] [-g group [-g group ...]] [-k keypair] [-d user_data |-f user_data_file] [--addressing addressing_type] [--instance-type instance_type] [--availability-zone zone] [--kernel kernel_id] [--ramdisk ramdisk_id] [--block-device-mapping block_device_mapping] [--monitor] [--disable-api-termination] [--instance-initiated-shutdown-behavior behavior] [--placement-group  placement-group] [--tenancy  tenancy] [--subnet subnet] [--private-ip-address  ip_address] [--client-token token]

  ami_id
      Unique ID of a machine image, returned by a call to ec2-describe-images.
      Type: String
      Default: None
      Example: ami-15a4417c

  -n , --instance-count min[-max]
      The number of instances to launch. If Amazon EC2 cannot launch the specified number of instances, no instances will launch. If this is specified as a range (min-max), Amazon EC2 will try to launch the maximum number, but no fewer than the minimum number.
      Type: String
      Default: 1
      Constraints: Between 1 and the maximum number allowed for your account (default: 20).
      Example: -n 5-10

  -g, --group group
      Name of the security group.
      Type: String
      Default: None
      Example: -g websrv

  -k, --key keypair
      The name of the key pair.
      Type: String
      Default: None
      Example: -k websvr-keypair

  -d, --user-data user_data
      Specifies Base64-encoded MIME user data to be made available to the instance(s) in this reservation.
      Type: String
      Default: None
      Example: -d s3-bucket:my-logs

  -f, --user-data-file filename
      Specifies the filename of the user data to be made available to the instance(s) in this reservation.
      Type: String
      Default: None
      Example: -f user-data.txt

  -t, --instance-type instance_type
      Specifies the instance type.
      Type: String
      Valid Values: m1.small | m1.large | m1.xlarge | c1.medium | c1.xlarge | m2.xlarge | m2.2xlarge | m2.4xlarge | cc1.4xlarge | cg1.4xlarge | t1.micro
      Default: m1.small
      Example: -t m1.large

  --availability-zone zone
      The Availability Zone in which to run the instance.
      Type: String
      Default: None
      Example: --availability-zone us-east-1a

  --kernel kernel
      The ID of the kernel with which to launch the instance.
      Type: String
      Default: None
      Example: --kernel aki-ba3adfd3

  --ramdisk ramdisk
      The ID of the RAM disk to select. Some kernels require additional drivers at launch. Check the kernel requirements for information on whether you need to specify a RAM disk. To find kernel requirements, refer to the Resource Center and search for the kernel ID.
      Type: String
      Default: None
      Example: --ramdisk ari-abcdef01

  -b, --block-device-mapping mapping
      Defines a block device mapping for the instance. This argument is passed in the form of <devicename>=<blockdevice>. The devicename is the device name of the physical device on the instance to map. The blockdevice can be one of the following values:
      none - specifies that the existing mapping on the specified image for this device should be suppressed. For example: /dev/sdc=none
      ephemeral[0..3] - indicates that an instance local storage device should be mapped to this device. Example: /dev/sdc=ephemeral0
      [snapshot-id]:[size]:[delete-on-termination (true|false)] - this value can be used to map a device to an existing EBS-backed volume by specifying an existing volume name. You can specify a new EBS-backed volume by skipping the snapshot ID and passing in a volume size instead; for example: /dev/sdb=:20. You can also specify whether the Amazon EBS volume should be deleted on termination; this value is true by default.

      Type: String
      Default: None
      Example: -b "/dev/sdb=snap-92d333fb::false"

  -m, --monitor
      Enables monitoring for the instance.
      Type: Boolean
      Default: Disabled
      Example: --monitor

  --disable-api-termination
      Disables the ability to terminate the instance using the EC2 API (i.e., "locks" the instance). To re-enable this ability, you must change the disableApiTermination attribute value to false using ec2-modify-instance-attribute.
      Type: String
      Default: False (you can terminate the instance using the API)
      Example: --disable-api-termination

  --instance-initiated-shutdown-behavior behavior
      If an instance shutdown is initiated, this determines whether the instance stops or terminates.
      Type: String
      Valid Values: stop | terminate
      Default: stop
      Example: --instance-initiated-shutdown-behavi

 --placement-group  placement-group
      Name of the placement group.
      Type: String
      Valid Values: cluster
      Default: None
      Example: --placement-group XYZ-cluster

  --tenancy tenancy
      The tenancy of the instance you want to launch. An instance with a tenancy of dedicated runs on single-tenant hardware and can only be launched into a VPC.
      Type: String
      Valid Values: default | dedicated
      Default: default
      Example: --tenancy dedicated

  -s, --subnet subnet
      If you are using Amazon Virtual Private Cloud, this specifies the ID of the subnet you want to launch the instance into.
      Type: String
      Default: None
      Example: -s subnet-f3e6ab83

  --private-ip-address ip_address
      If you are using Amazon Virtual Private Cloud, you can optionally use this parameter to assign the instance a specific available IP address from the subnet.
      Type: String
      Default: Amazon VPC selects an IP address from the subnet for the instance
      Example: --private-ip-address 10.0.0.25

  --client-token token
      Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, go to How to Ensure Idempotency in the Amazon Elastic Compute Cloud User Guide.
      Type: String
      Default: None
      Constraints: Maximum 64 ASCII characters
      Example: --client-token 550e8400-e29b-41d4-a716-446655440000

  TERMINATE INSTANCES

  cvm [COMMON_OPTIONS] terminate-instances  instance_id [instance_id ...]

  Instance_id
      IDs of instances to terminate.
      Type: String
      Default: None
      Example: i-43a4412a
);

exit;

}

read_config("$ENV{HOME}/.ec2/ec2.conf");

for my $ini ("$ENV{HOME}/.ec2/$region.conf",
             "$region.conf") {
   read_config($ini);
}


my $cloud = new Cloud($access_key_id,  $secret_access_key, {
                            SignatureVersion =>2, 
                            ServiceURL => $url
                      });


my $cmd = $ARGV[0]; shift @ARGV;

use Switch;

switch ($cmd) {
    case "ls" { &cmd_ls($cloud); }
    case "describe-instances" { &cmd_ls($cloud); }
    case "describe-images" {  unshift(@ARGV, '-i'); &cmd_ls($cloud); }
    case "run" { &cmd_run($cloud); }
    case "run-instances" { &cmd_run($cloud); }
    case "terminate" { &cmd_terminate($cloud); }
    case "terminate-instances" { &cmd_terminate($cloud); }
    else { Usage() }
}  

exit;

###########################################################################
package Template;
###########################################################################

use warnings;
use strict;

our $VERSION = '0.01';
my $BASE = '';

sub new {
    my $proto = shift;
    my ($file,$html) = @_;
    my $class = ref($proto) || $proto;
    my $self = {};
    bless($self,$class);
    if ( defined ($html) ) {
      $self->{'FILE'} = '-';
      $self->{'HTML'} = $html;
      return $self;
    } else {
      $self->{'FILE'} = $file;
      my @path;
      defined($ENV{CVM_TEMPLATE_PATH}) and push @path, split(':',$ENV{CVM_TEMPLATE_PATH});
      push @path,".";
      push @path,"$ENV{HOME}/.cvm";
      foreach my $dir (@path) {
        if ( -f $dir.'/'.$file.'.tpl' ) {
          $self->{'FILE'} = $dir.'/'.$file.'.tpl';
          $self->{'HTML'} = $self->_read_file();
          return $self;
        }
      }
      return $self->_template_not_found($!,$file)
    } 
}

sub replace {
    my $self = shift;
    my ($hashref) = @_;
    my %hash;
    %hash = %$hashref if ref($hashref) eq 'HASH';
    my $data = $self->{'HTML'};

    while ($data =~ /\[\[IF (.*?)\]\](.*?)\[\[ENDIF\]\]/s) {
	my $token = $1;
	my $else = $2;
	if ($else =~ /\[\[ELSE\]\]/) {
	    if ($hash{$token}) {
		$data =~ s/\[\[IF $token\]\](.*?)\[\[ELSE\]\].*?\[\[ENDIF\]\]/$1/s;
	    }
	    else {
		$data =~ s/\[\[IF $token\]\].*?\[\[ELSE\]\](.*?)\[\[ENDIF\]\]/$1/s;
	    }
	}
	else {
	    if ($hash{$token}) {
		$data =~ s/\[\[IF $token\]\](.*?)\[\[ENDIF\]\]/$1/s;
	    }
	    else {
		$data =~ s/\[\[IF $token\]\].*?\[\[ENDIF\]\]//s;
	    }
	}
    }

    while ($data =~ /\[\[(.*?)\]\]/g) {
	my $token = $1;
	my $key = $token;
	my $value = $hash{$key};
	if (defined $value) {
	    $data =~ s/\[\[$token\]\]/$value/mg;
	}
	else {
	    $data =~ s/\[\[$token\]\]//mg;
	}
    }

    return $data;
}

sub _read_file {
    my $self = shift;
    my $file = $self->{'FILE'};
    my $CHUNK_SIZE = 4096;
    my ($chunk, $data);

    open(FILE, "$file") || return $self->_template_not_found($!,$file);
    binmode(FILE) || return $self->_template_not_found($!);
    $data = '';
    while (read(FILE, $chunk, $CHUNK_SIZE)) {
	$data .= $chunk;
    }
    close(FILE) || return $self->_template_not_found($!);
    return $data;
}

sub _template_not_found {
    my $self = shift;
    my ($error) = @_;
    return qq|Error: template not found!\n\t$error ($self->{'FILE'})\n|;
}

1;

###########################################################################
package Config;
###########################################################################

# If you thought Config::Simple was small...

use strict;
BEGIN {
    require 5.004;
    $Config::VERSION = '2.14';
}

# Create an empty object
sub new { bless {}, shift }

# Create an object from a file
sub read {
    my $class = ref $_[0] ? ref shift : shift;

    # Check the file
    my $file = shift or return $class->_error( 'You did not specify a file name' );
    return $class->_error( "File '$file' does not exist" )              unless -e $file;
    return $class->_error( "'$file' is a directory, not a file" )       unless -f _;
    return $class->_error( "Insufficient permissions to read '$file'" ) unless -r _;

    # Slurp in the file
    local $/ = undef;
    open( CFG, $file ) or return $class->_error( "Failed to open file '$file': $!" );
    my $contents = <CFG>;
    close( CFG );

    $class->read_string( $contents );
}

# Create an object from a string
sub read_string {
	my $class = ref $_[0] ? ref shift : shift;
	my $self  = bless {}, $class;
	return undef unless defined $_[0];

	# Parse the file
	my $ns      = '_';
	my $counter = 0;
	foreach ( split /(?:\015{1,2}\012|\015|\012)/, shift ) {
		$counter++;

		# Skip comments and empty lines
		next if /^\s*(?:\#|\;|$)/;

		# Remove inline comments
		s/\s\;\s.+$//g;

		# Handle section headers
		if ( /^\s*\[\s*(.+?)\s*\]\s*$/ ) {
			# Create the sub-hash if it doesn't exist.
			# Without this sections without keys will not
			# appear at all in the completed struct.
			$self->{$ns = $1} ||= {};
			next;
		}

		# Handle properties
		if ( /^\s*([^=]+?)\s*=\s*(.*?)\s*$/ ) {
			$self->{$ns}->{$1} = $2;
			next;
		}

		return $self->_error( "Syntax error at line $counter: '$_'" );
	}

	$self;
}

# Save an object to a file
sub write {
    my $self = shift;
    my $file = shift or return $self->_error(
	'No file name provided'
	);

    # Write it to the file
    my $string = $self->write_string;
    return undef unless defined $string;
    open( CFG, '>' . $file ) or return $self->_error(
	"Failed to open file '$file' for writing: $!"
	);
    print CFG $string;
    close CFG;
}


###########################################################################
package Cloud;
###########################################################################

use strict;
use vars qw($VERSION);
use Data::Dumper qw(Dumper);
use Config;

use Amazon::EC2::Client;
use Amazon::EC2::Model::DescribeImagesRequest;
use Amazon::EC2::Model::DescribeInstancesRequest;
use Amazon::EC2::Model::RunInstancesRequest;
use Amazon::EC2::Model::TerminateInstancesRequest;
use Amazon::EC2::Model::Filter;

sub new {
   my $class = shift;
   my ($id, $key, $request) = @_;
   my $self  = {};
   bless $self, $class;

   $ENV{PERL_LWP_SSL_VERIFY_HOSTNAME}=0;

   eval {
      $self->{service} = Amazon::EC2::Client->new($id,$key,$request);
   };

   my $ex = $@;
   if ($ex) {
      require Amazon::EC2::Exception;
      if (ref $ex eq "Amazon::EC2::Exception") {
  	 print("Caught Exception: " . $ex->getMessage() . "\n");
	 print("Response Status Code: " . $ex->getStatusCode() . "\n");
	 print("Error Code: " . $ex->getErrorCode() . "\n");
	 print("Error Type: " . $ex->getErrorType() . "\n");
	 print("Request ID: " . $ex->getRequestId() . "\n");
	 print("XML: " . $ex->getXML() . "\n");
      } else {
	croak $@;
      }
   }

   return $self;
}


sub _do {
   my $self = shift;
   my ($function,$request) = @_;
   my $response;
   eval {
     $response = $self->{service}->$function($request);
   };
   my $ex = $@;
   if ($ex) {
      require Amazon::EC2::Exception;
      if (ref $ex eq "Amazon::EC2::Exception") {
  	 print("Caught Exception: " . $ex->getMessage() . "\n");
	 print("Response Status Code: " . $ex->getStatusCode() . "\n");
	 print("Error Code: " . $ex->getErrorCode() . "\n");
	 print("Error Type: " . $ex->getErrorType() . "\n");
	 print("Request ID: " . $ex->getRequestId() . "\n");
	 # print("XML: " . $ex->getXML() . "\n");
         exit 1;
      } else {
	croak $@;
      }
   }
   return($response);
}

sub describeImages {
   my ($self,$request) = @_;
   return($self->_do("describeImages",$request));
}

sub describeInstances {
   my ($self,$request) = @_;
   return($self->_do("describeInstances",$request));
}

sub runInstances {
   my ($self,$request) = @_;
   return($self->_do("runInstances",$request));
}

sub terminateInstances {
   my ($self,$request) = @_;
   return($self->_do("terminateInstances",$request));
}


